---
title: "Getting Started with Shiny<br/>Day 1"
author: "Colin Rundel"
format: 
  revealjs:
    logo: images/shiny.png
    footer: "RStudioConf 2022 - Getting Started with Shiny"
    slide-number: true
    highlight-style: a11y
    theme: [default, ../custom.scss]
    revealjs-plugins:
    - ../countdown
execute:
  echo: true
title-slide-attributes:
    data-background-image: "images/hero-national-harbor.png"
    data-background-size: cover
    data-background-opacity: "0.5"
---

```{r setup}
#| include: false
library(shiny)
```

# Introduction to Shiny

## Shiny

> Shiny is an R package that makes it easy to build interactive web apps straight from R. You can host standalone apps on a webpage or embed them in R Markdown documents or build dashboards. You can also extend your Shiny apps with CSS themes, htmlwidgets, and JavaScript actions.

## Shiny App

<br/><br/>

::: columns
::: {.column width="40%"}
::: {style="text-align:center; font-size: 90px"}
`r fontawesome::fa("r-project")` + `r fontawesome::fa("server")`
:::
:::

::: {.column width="20%"}
::: {style="text-align: center; font-size: 90px"}
â‡„
:::
:::

::: {.column width="40%"}
::: {style="text-align: center"}
::: {style="font-size: 90px"}
`r fontawesome::fa("file-code")`
:::

::: {style="font-size: 50px"}
`r fontawesome::fa("html5")` + `r fontawesome::fa("js")` + `r fontawesome::fa("css3")`
:::
:::
:::
:::

## Anatomy of an App

```{r shiny-anatomy}
#| eval: false
#| echo: true
#| code-line-numbers: "|3-8|4|6-8"
library(shiny)

shinyApp(
  ui = list(),
  
  server = function(input, output, session) {
  
  }
)
```

## Demo 1 - A Basic Example

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo1.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|1-3|5-27|6-17|18-26"
#| file: "../demos/demo1.R"
```

## Your turn - Exercise 1

Copy the code from the previous slide (or open `exercises/ex1.R` in the git repository) and try running it in your console.

Check that you are able successfully run the shiny app and are able to interact with it. If everything is working try modifying the code (e.g. try adding or removing a city from `radioButtons()`).

<countdown time="300"/>

## Troubleshooting

A couple of quick tips:

-   If you can find the data, make sure you have opened the workshop's RStudio project

-   Make sure you have the latest versions of `shiny` and `tidyverse` installed

-   If you are stuck, ask a neighbor for help and or raise your hand

# Layouts

## Sidebar layout

![](images/layout-sidebar.png){fig-align="center" width="60%"}

::: aside
From [Mastering Shiny](https://mastering-shiny.org/action-layout.html#page-with-sidebar)
:::

## Multi-row layout

![](images/layout-fluidrow.png){fig-align="center" width="60%"}

::: aside
From [Mastering Shiny](https://mastering-shiny.org/action-layout.html#multi-row)
:::

## Other layouts

-   Tabsets - see `tabsetPanel()`

-   Navbars and navlists

    -   See `navlistPanel()`
    -   and `navbarPage()`

-   [Shinydashboard](https://rstudio.github.io/shinydashboard/)

# Input Widgets

## Shiny Widgets Gallery

::: {style="text-align: center"}
[https://shiny.rstudio.com/gallery/widget-gallery.html]()
:::

<iframe data-src="https://shiny.rstudio.com/gallery/widget-gallery.html">

</iframe>

## A brief widget tour

<br/><br/><br/>

::: {.larger style="text-align: center"}
[rundel.shinyapps.io/widgets/](https://rundel.shinyapps.io/widgets/)
:::

:::{.aside}
Take a look at `widgets/widgets.qmd` if you want to see how this was built.
:::


## Your turn - Exercise 2

We've just seen a number of alternative input widgets, starting from the code in `exercises/ex2.R` try changing the `radioButton()` input to something else.

What happens if you use an input capable of selecting multiple values 

* e.g. `checkboxGroupInput()` 
* or `selectInput(multiple = TRUE)`?


<countdown time="450"/>


# Basic Reactivity

## Reactive Elements

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo1.R`
:::
::: {.code-half}
```{r}
#| eval: false
#| code-line-numbers: "10-13|15|10-13,15"
#| file: "../demos/demo1.R"
```
:::


```{mermaid}
flowchart TD
  subgraph outputs
  n2[plot]
  end
  subgraph inputs
  n1([city]) 
  end
```

Our inputs and outputs are defined by our `ui` elements.


## Reactive expression

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo1.R`
:::
::: {.code-half}
```{r}
#| eval: false
#| code-line-numbers: "18-25|19,21"
#| file: "../demos/demo1.R"
```
:::

```{mermaid}
flowchart LR
  subgraph outputs
  n2[plot]
  end
  subgraph inputs
  n1([city]) 
  end
  n1 --> n2
```

The "reactive" logic is defined by our `server` function - shiny takes care of figuring out what depends on what.


## Demo 2 - Adding an input

Now we will add an additional input and related plotting logic,

::: {.fragment}
::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo2.R`
:::
```{r}
#| eval: false
#| file: "../demos/demo2.R"
#| code-line-numbers: "|14|26-36"
```
:::


## Reactive graph

With these additions, what should our reactive graph look like now?

::: {.fragment}
```{mermaid}
flowchart TB
  subgraph outputs
  out1[plot]
  end
  subgraph inputs
  in1([city]) 
  in2([forecast]) 
  end
```
:::

## Reactive graph

With these additions, what should our reactive graph look like now?

```{mermaid}
flowchart LR
  subgraph outputs
  out1[plot]
  end
  subgraph inputs
  in1([city]) 
  in2([forecast]) 
  end
  in1 & in2 --> out1
```


## Your turn - Exercise 3

Starting with the demo 2 code in `exercises/ex3.R` add a `tableOutput()` to the app's `mainPanel()`.

Once you have done that you should then add logic to the `server` function to render a table that shows the daily min and max temperature for each day of the week.

- You will need to use `renderTable()` instead of `renderPlot()`
- `lubridate::wday()` is likely to be useful along with `group_by()` & `summarize()`

<countdown time="600"/>


## Reactive graph (again)

```{mermaid}
flowchart LR
  subgraph outputs
  out1[plot]
  out2[minmax]
  end
  subgraph inputs
  in1([city]) 
  in2([forecast]) 
  end
  in1 & in2 --> out1
  in1 --> out2
```

## reactlog

Another (more detailed) way of seeing the reactive graph (dynamically) for your app is using the `reactlog` package.


Run the following to log and show all of the reactive events occuring within `ex3_soln.R`, 
```{r}
#| eval: false
reactlog::reactlog_enable()

(source(here::here("exercises/solutions/ex3_soln.R")))

shiny::reactlogShow()
```

# User selected variables

## Demo 3 - Not just temperature

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo3.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|5-11|22-25|34-40|42-55"
#| file: ../demos/demo3.R
```


## `.data` & `.env`

These are an excellent option for avoiding some of the complexity around NSE with `rlang` (e.g. `{{` and `!!`) when working with functions built with the tidy eval framework (e.g. `dplyr` and `ggplot2`).

<blockquote cite="https://rlang.r-lib.org/reference/dot-data.html">
* `.data` retrieves data-variables from the data frame.
* `.env` retrieves env-variables from the environment.
</blockquote>

For more details see the [.data and .env pronouns](https://rlang.r-lib.org/reference/dot-data.html) article.

# `reactive()` & `observe()`

## Don't repeat yourself (DRY)

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo3.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "35-36,43-44"
#| file: ../demos/demo3.R
```

## Demo 4 - Add a reactive

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo4.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "35-38,41,48"
#| file: ../demos/demo4.R
```

## Reactive expressions

Are an example of a "reactive conductor" as they exist in between sources (e.g. an input) and endpoints (e.g. an output).

As such a `reactive()` depends on various upstream inputs and can be used to generate output.

Their primary use is similar to a function in an R script, they help to

- avoid repeating yourself
- decompose complex computations into smaller / more modular steps

## `reactive()` tips

- Code composed similarly to `render*()` functions

- If `react_obj = reactive({...})` then any consumer 
  must access value using `react_obj()` and not `react_obj`
    - think of `reactive()` as function that returns the current value
    - You will see,
      
      ``` 
      ## Error: object of type 'closure' is not subsettable`
      ```

- Like `input`s reactive expressions may only used within a reactive context (e.g. `render*()`, `reactive()`, `observer()`, etc.)
  
  ```
  ## Error: Operation not allowed without an active reactive context. (You tried to do something that can only be done from inside a reactive expression or observer.)
  ```

## Reactive graph

```{mermaid}
flowchart LR
  subgraph outputs
  out1[plot]
  out2[minmax]
  end
  subgraph reactives
  react1{{d_city}}
  end
  subgraph inputs
  in1([city]) 
  in2([var])
  end
  in1 --> react1
  react1 --> out1 & out2
  in2 --> out1 & out2
```

## `observer()`

These are constructed in the same way as a `reactive()` however an observer does not return a value, as such they are used for their side effects.

The side effects in most cases involve sending data to the client broswer.

While not obvious given their syntax - the results of the `render*()` functions are observers.

## Demo 5 - Cities AND states

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo5.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "18-26|46-57|41"
#| file: ../demos/demo5.R
```

## Reactive graph

```{mermaid}
flowchart LR
  subgraph outputs
  out1[plot]
  out2[minmax]
  end
  subgraph observers
  obs1[obs]
  end
  subgraph reactives
  react1{{d_city}}
  end
  subgraph inputs
  in0([state])
  in1([city]) 
  in2([var])
  end
  in0 --> obs1
  obs1 -.-> in1
  in1 --> react1
  react1 --> out1 & out2
  in2 --> out1 & out2
```


## Using `req()`

You may have notices that the App initializes with Arizona selected for the state but no initial selection for the city. Due to this we have some warnings generated initially:

```r
Warning in min(.data[["temperature"]]) :
  no non-missing arguments to min; returning Inf
```

This can be a common occurrence, particularly at initialization (or if a user enters bad / unexpected input).

A good way to protect against this is to validate inputs - the simplest way is to use `req()` which checks if a value is [truthy](https://shiny.rstudio.com/reference/shiny/latest/isTruthy.html). Non-truthy values prevent further execution of the reactive code (and downstream consumer's code).

More detailed validation and error reporting is possible with [`validate()`](https://shiny.rstudio.com/reference/shiny/1.7.0/validate.html) and [`need()`](https://shiny.rstudio.com/reference/shiny/1.7.0/validate.html).

## Your turn - Exercise 4

Using the code from demo 4 as a starting point add another observer to the app that updates the `var` `selectInput()` such that any variables that are constant (0 variance), for the currrently selected cities, are removed.

For example, many cities (e.g. Mesa, AZ) will report a visibility of 10 miles for every hour of the forecast - therefore this variable should **not** be selectable from this input.

*Hint* - think about what inputs / reactives would make the most sense to use for this.

<countdown time="600"/>


## `bindEvent()`

For both observers and reactive expressions Shiny will automatically determine reactive dependencies for you - in some cases this is not what we want.

To explicitly control the reactive dependencies of reactive expressions, render functions, and observers we can modify them using `bindEvent()` where the dependencies are explicitly provided via the `...` argument.

Similar effects can be achieved via `observeEvent()` / `eventReactive()` but these have been soft deprecated as of Shiny 1.6.

*Note* - when binding a reactive you must use the functional form, i.e. `react()` and not `react`


# Downloading from Shiny

## `downloadButton()` & `downloadHandler()`

These are the UI and server components needed for downloading a file from your Shiny app. The downloaded file can be of any arbitrary type and content.

`downloadButton()` is a special case of an `actionButton()` with specialized server syntax. Specifically, within the server definition the `downloadHandler()` is attached using `output`, e.g.
```r
output$download_id = downloadHandler(...)
```

The handler then defines the `filename` function for generating a default filename and `content` function for writing the download file's content to a temporary file, which can then be served by Shiny for downloading.


## Demo 6 - A download button

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo6.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|31|41-51|42-47|48-50"
#| file: ../demos/demo6.R
```

## Demo 7 - A fancy download button

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo7.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|30|40-53|55-69"
#| file: ../demos/demo7.R
```