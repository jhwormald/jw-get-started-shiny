---
title: "Getting Started with Shiny<br/>Day 2"
author: "Colin Rundel"
format: 
  revealjs:
    logo: images/shiny.png
    footer: "RStudioConf 2022 - Getting Started with Shiny"
    slide-number: true
    highlight-style: a11y
    theme: [default, custom.scss]
    revealjs-plugins:
    - countdown
execute:
  echo: true
title-slide-attributes:
    data-background-image: "images/hero-national-harbor.png"
    data-background-size: cover
    data-background-opacity: "0.5"
---

```{r setup}
#| include: false
library(shiny)
```

# Dynamic UIs

## `uiOutput()`

Occasionally with a Shiny app it is necessary to have a user interface that needs to adapt dynamically based on something that cannot be known before runtime.

We will now work through an example where we allow a user to upload data for new cities which will be used to supplement the existing weather data.

The issue here is that the new data may contain some subset of the existing columns (and they may have different names) so we will need to map between the two sets of columns and we don't want to hard code for every possible column.

## Demo 9 - More weather (Part 1)

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo9_part1.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|29-40|54-83|83|62-73|75-81"
#| file: "../demos/demo9_part1.R"
```

## Demo 9 - More weather (Part 2)

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo9_part2.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|87-91|93-119"
#| file: "../demos/demo9_part2.R"
```

# shinydashboard

## shinydashboard

Is a package that enables the easy generation of [bootstrap](https://getbootstrap.com/) based dynamic Shiny dashboards.

The core of the package is a common dashboard layout and a number of specialized UI elements (static and reactive) for creating an attractive interface. 

<br/>

![](images/shinydashboard_layout.png){fig-align="center" width="40%"}


## Dashboard basics

```{r}
#| eval: false
#| code-line-numbers: "|5-12|5|6-9|10|11"
library(shiny)
library(shinydashboard)

shinyApp(
  ui = dashboardPage(
    dashboardHeader(
      title="Test", 
      .list = list(div("hello"))
    ),
    dashboardSidebar(),
    dashboardBody()
  ),
  server = function(input, output, session) {
  }
)
```

## Dashboard header

This is a container for the `title` and any `dropdownMenu()`s.

Dynamic menus can be generated using:

- Adding `dropdownMenuOutput("menu")` to the header

- Adding `output$menu = renderMenu({...})` to the server, where the reactive code returns a `dropdownMenu()` object.

This is a common design pattern within the package, so many of the static UI elements will also have a `*Output()` and `render*()` implementation.

## Dashboard sidebar

This can function in the same way as the `sidebarPanel()` in `sidebarLayout()`, allowing for the inclusion of inputs and any other html content. Alternatively, it can also function as a `tabPanel()` like menu.

For the latter, instead of `tabsetPanel()` we use `sidebarMenu()`, text and icons are assigned using `menuItem()`s within this function. However, since the panels being activated are contained in the body and not the sidebar - their UI code goes under `dashboardBody()` using `tabItems()` and `tabItem()`. The connection is made via matching of the `tabName` arguments.

## Body building blocks

::: columns
::: {.column width="50%"}
### `box()`
![](images/shinydashboard_box.png){fig-align="center" width="80%"}
![](images/shinydashboard_box2.png){fig-align="center" width="80%"}
:::

::: {.column width="50%"}
### `infoBox()`
![](images/shinydashboard_infobox.png){fig-align="center" width="90%"}

<br/>

### `valueBox()`
![](images/shinydashboard_valuebox.png){fig-align="center" width="90%"}

:::
:::

## Colors

The color of the various boxes is specified via `status` or `background` for `box()` or `color` for the others.

Available options include,

```{r}
shinydashboard:::validStatuses
```

<br/>

```{r}
shinydashboard:::validColors
```



## Body layout

![](images/layout-fluidrow.png){fig-align="center" width="60%"}

*Note* - Bootstrap defines a page to have a width of 12 units, a `column()`'s `width` is given in these units.

## Your turn - Exercise 6

Again starting with the app version from Demo 5 (code available in `exercises/ex6.R`) convert the app to use shinydashboard instead of `fluidPage()` and `sidebarLayout()`. 

The specifics of the design are up to you, but think about where it makes the most sense to include the various UI elements.

See the documentation of `box()` and the other building blocks for guidance on how to use them, the examples [here](http://rstudio.github.io/shinydashboard/structure.html#boxes) may also be useful.

If you finish early try adding a `valueBox()` or `infoBox()` (or two).

<countdown time="600"/>


## Demo 10 - Dynamic boxes

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo10.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|29-39|33-36,37|40-44|49-60|62-73|75-84"
#| file: "../demos/demo10.R"
```


# Shiny Modules

## DRY again

With the last demo you may have noticed that all three of the infoBoxes had nearly identical code.

As mentioned before this is something we would like to avoid / minimize wherever possible.

Previously we were able to use a `reactive()` to remove duplicate code, but that is not possible here since we need three distinct widgets + related server code.


## Modularizing Shiny code

The general solution to this kind of problem is to use functions to abstract our code.

Within Shiny there are two issues we need to address,

- Our code occurs in both the UI and the server - so we will need to write one function for each

- Shiny inputs and outputs each share a global namespace so when reusing components we need to make sure these names do not collide.


## UI module

Creation of a UI module is straightforward, 

- Create a function that takes `id` as an argument, additional arguments are optional

- The function should return a `list()` or `tagList()` of UI elements

- All `input*()` and `*Output()` functions must use `NS(id)` to mangle their `inputId` or `outputId`s respectively.

  ```{r}
  id = "widget1"
  ns = NS(id)
  ns("button")
  
  NS("widget2", id = "textout")
  ```


## Server module 

Again start with a function that takes `id` as an argument, additional arguments are optional.

- Module's server function is implemented using
  
  ```r
  moduleServer(
    id,
    function(input, output, session) {
      ...
    }
  )
  ```  

- Namespace mangling will be taken care of automatically (except for `uiOutput`/`renderUI` in which case the current namespace can be accessed with `session$ns`)


## A counting button

```{r}
#| eval: false
#| code-line-numbers: "|1-6|2,4|8-25|9-24|11-23"
countButtonUI = function(id, text = "Initializing") {
  ns = NS(id)
  tagList(
    actionButton(ns("button"), label = text, class = "primary")
  )
}

countButtonServer = function(id, prefix = "Clicked: ") {
  moduleServer(
    id,
    function(input, output, session) {
      count = reactiveVal(0)
      observe({
        count(count() + 1)
      }) %>%
        bindEvent(input$button)
      
      observe({
        updateActionButton(
          inputId = "button", label = paste0(prefix, count()),
        )
      })
    }
  )
}
```

## Putting it together

```{r}
#| eval: false

shinyApp(
  ui = fluidPage(
    countButtonUI("count1"),
    countButtonUI("count2"),
    countButtonUI("count3")
  ),
  server = function(input, output, session) {
    countButtonServer("count1")
    countButtonServer("count2")
    countButtonServer("count3")
  }
)
```

## Demo 11 - Dynamic box module

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo11.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|11-13|15-35|76-80|82-86|88-92"
#| file: "../demos/demo11.R"
```

# Themeing

## Shiny & bootstrap

Most of the interface provided by Shiny is based on the html elements, styling, and javascript provided by the Bootstrap library.

As we've seen so far, knowing the specifics of Bootstrap are not needed for working with Shiny - but understanding some of its conventions goes a long way to helping you customize the elements of your app (via custom CSS and other components).

This is not the only place that Bootstrap shows up in the R ecosystem - both RMarkdown and Quarto html documents use Bootstrap for styling as well.

## Bootswatch

Due to the ubiquity of Bootstrap a large amount of community effort has gone into developing custom themes - a large free collection of this is avaiable at [bootswatch.com/](https://bootswatch.com/).

<iframe data-src="https://bootswatch.com/" width="100%" height="450px" style="border:1px solid;border-radius: 5px;">
</iframe>


## bslib

> The bslib R package provides tools for customizing Bootstrap themes directly from R, making it much easier to customize the appearance of Shiny apps & R Markdown documents. bslibâ€™s primary goals are:
> 
> * Make custom theming as easy as possible.
>   * Custom themes may even be created interactively in real-time.
>
> * Also provide easy access to pre-packaged Bootswatch themes.
>
> * Make upgrading from Bootstrap 3 to 4 (and beyond) as seamless as possible.
>
> * Serve as a general foundation for Shiny and R Markdown extension packages.


## `bs_theme()`

Provides a high level interface to adjusting the theme for an entire app,

* Change bootstrap version via `version` argument

* Pick a bootswatch theme via `bootswatch` argument

* Adjust basic color palette (`bg`, `fg`, `primary`, `secondary`, etc.)

* Adjust fonts (`base_font`, `code_font`, `heading_font`, `font_scale`)


Resulting object is passed to the `theme` argument of `fluidPage()` and similar page UI elements.


## Your turn - Exercise 7

Again starting with the app version from Demo 5 (code available in `exercises/ex7.R`) use bslib to add a theme to the Shiny app using `bs_theme()`.

* Try changing the bootstrap version (3, 4, and 5) and see what happens.

* Try picking out a couple of bootswatch themes and try applying them to the app.

<countdown time="450"/>


## Demo 12 - Interactive theming

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo12.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|13|45"
#| file: "../demos/demo12.R"
```

## Demo 13 - Dynamic theming

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo13.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|11,12|16|49-52"
#| file: "../demos/demo13.R"
```

## thematic

> Simplified theming of ggplot2, lattice, and {base} R graphics. In addition to providing a centralized approach to styling R graphics, thematic also enables automatic styling of R plots in Shiny, R Markdown, and RStudio.

In the case of our Shiny app, all we need to do is to include a call to `thematic_shiny()` before the app is loaded. 

- Using the value `"auto"` will attempt to resolve the `bg`, `fg`, `accent`, or `font` values at plot time.

## Demo 14 - thematic

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo14.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|12"
#| file: "../demos/demo14.R"
```

# Deploying Shiny apps

## Organizing your app



# Odds & Ends


# Q&A 


## Workshop Survey

<br/><br/><br/><br/>

::: {.larger style="text-align: center;"}
[rstd.io/conf-workshop-survey](http://rstd.io/conf-workshop-survey)
:::


## Thank you!

<table class="details">
  <tr>
    <td style="text-align:center">&nbsp;`r fontawesome::fa("link")`</td>
    <td>[rstd.io/start-shiny](https://rstd.io/start-shiny)</td>
  </tr>
  <tr>
    <td style="text-align:center">&nbsp;`r fontawesome::fa("file")`</td>
    <td>[rstudio-conf-2022/get-started-shiny/](https://github.com/rstudio-conf-2022/get-started-shiny/)</td>
  </tr>
  <tr>
    <td style="text-align:center">&nbsp;`r fontawesome::fa("envelope")`</td>
    <td>
    <a href="mailto:rundel@gmail.com">rundel@gmail.com</a><br/>
    <a href="mailto:colin.rundel@duke.edu">colin.rundel@duke.edu</a>
    </td>
  </tr>
  <tr>
    <td style="text-align:center">&nbsp;`r fontawesome::fa("github")`</td>
    <td><a href="https://github.com/rundel">rundel</a></td>
  </tr>
  <tr>
    <td style="text-align:center">&nbsp;`r fontawesome::fa("twitter")`</td>
    <td><a href="https://twitter.com/rundel">@rundel</a></td>
  </tr>
</table>