---
title: "Getting Started with Shiny<br/>Day 2"
author: "Colin Rundel"
format: 
  revealjs:
    logo: images/shiny.png
    footer: "RStudioConf 2022 - Getting Started with Shiny"
    slide-number: true
    highlight-style: a11y
    theme: [default, ../custom.scss]
    revealjs-plugins:
    - ../countdown
execute:
  echo: true
title-slide-attributes:
    data-background-image: "images/hero-national-harbor.png"
    data-background-size: cover
    data-background-opacity: "0.5"
---

```{r setup}
#| include: false
library(shiny)
```

# Uploading data

## Demo 8 - Using `fileInput()`

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo8.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|9|12,18-20|13,22-24"
#| file: "../demos/demo8.R"
```


## `fileInput()` widget

This widget behaves a bit differently than the others we have seen - once a file is uploaded it returns a data frame with:

* `name` - the original filename (from the client's system)

* `size` - file size in bytes

* `type` - file [mime type](https://en.wikipedia.org/wiki/Media_type), usually determined by the file extension

* `datapath` - location of the *temporary* file on the server


Your app is responsible for the actual process of reading in the uploaded file.


## `fileInput()` hints

* `input$upload` will default to `NULL` when the app is loaded, using `req(input$upload)` for downstream consumers is a good idea

* Files in `datapath` are temporary and should be treated as ephemeral (additional uploads can result in the previous files being deleted)

* `type` is at best a guess - validate uploaded files and write defensive code

* The `accept` argument helps to limit file types but cannot prevent bad files


## Your turn - Exercise 5

Starting with the app version from Demo 5 (code available in `exercises/ex5.R`) replace the preloading of the weather data (`d` and `d_vars`) with reactive versions that are populated via a `fileInput()` widget. 

You should then be able to get the same app behavior as before once `data/weather.csv` is uploaded. You can also check that your app works with the `data/sedona.csv` and `data/gayload.csv` datasets as well.

*Hint* - remember that anywhere that uses either `d` or `d_vars` will now need to use `d()` and `d_vars()` instead.

<countdown time="600"/>


# Dynamic UIs

## `uiOutput()`

Occasionally with a Shiny app it is necessary to have a user interface that needs to adapt dynamically based on something that cannot be known before runtime.

We will now work through an example where we allow a user to upload data for new cities which will be used to supplement the existing weather data.

The issue here is that the new data may contain some subset of the existing columns (and they may have different names) so we will need to map between the two sets of columns and we don't want to hard code for every possible column.

## Demo 9 - More weather (Part 1)

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo9_part1.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|33-44|58-87|87|66-77|79-85"
#| file: "../demos/demo9_part1.R"
```

## Demo 9 - More weather (Part 2)

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo9_part2.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|89-93|95-127"
#| file: "../demos/demo9_part2.R"
```

# shinydashboard

## shinydashboard

Is a package that enables the easy generation of [bootstrap](https://getbootstrap.com/) based dynamic Shiny dashboards.

The core of the package is a common dashboard layout and a number of specialized UI elements (static and reactive) for creating an attractive interface. 

<br/>

![](images/shinydashboard_layout.png){fig-align="center" width="40%"}


## Dashboard basics

```{r}
#| eval: false
library(shiny)
library(shinydashboard)

shinyApp(
  ui = dashboardPage(
    dashboardHeader(
      title="Test", 
      .list = list(div("hello"))
    ),
    dashboardSidebar(),
    dashboardBody()
  ),
  server = function(input, output) {
  }
)
```

## Dashboard header

This is a container for the `title` and any `dropdownMenu()`s.

Dynamic menus can be generated using:

- Adding `dropdownMenuOutput("menu")` to the header

- Adding `output$menu = renderMenu({...})` to the server, where the reactive code returns a `dropdownMenu()` object.

This is a common design pattern within the package, so many of the static UI elements will also have a `*Output()` and `render*()` implementation.

## Dashboard sidebar

This can function in the same way as the `sidebarPanel()` in `sidebarLayout()`, allowing for the inclusion of inputs and any other html content. Alternatively, it can also function as a `tabPanel()` like menu.

For the latter, instead of `tabsetPanel()` we use `sidebarMenu()`, text and icons are assigned using `menuItem()`s within this function. However, since the panels being activated are contained in the body and not the sidebar - their UI code goes under `dashboardBody()` using `tabItems()` and `tabItem()`. The connection is made via matching of the `tabName` arguments.

## Body building blocks

::: columns
::: {.column width="50%"}
### `box()`
![](images/shinydashboard_box.png){fig-align="center" width="80%"}
![](images/shinydashboard_box2.png){fig-align="center" width="80%"}
:::

::: {.column width="50%"}
### `infoBox()`
![](images/shinydashboard_infobox.png){fig-align="center" width="90%"}

<br/>

### `valueBox()`
![](images/shinydashboard_valuebox.png){fig-align="center" width="90%"}

:::
:::

## Colors

The color of the various boxes is specified via `status` or `background` for `box()` or `color` for the others.

Available options include,

```{r}
shinydashboard:::validStatuses
```

<br/>

```{r}
shinydashboard:::validColors
```



## Body layout

![](images/layout-fluidrow.png){fig-align="center" width="60%"}

*Note* - Bootstrap defines a page to have a width of 12 units, a `column()`s `width` is given in these units.

## Your turn - Exercise 6

Again starting with the app version from Demo 5 (code available in `exercises/ex6.R`) convert the app to use shinydashboard instead of `fluidPage()` and `sidebarLayout()`. 

The specifics of the design are up to you, but think about where it makes the most sense to include the various UI elements.

See the documentation of `box()` and the other building blocks for guidance on how to use them, the examples [here](http://rstudio.github.io/shinydashboard/structure.html#boxes) may also be useful.

If you finish early try adding a `valueBox()` or `infoBox()` (or two).

<countdown time="600"/>


## Demo 10 - Dynamic boxes

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo10.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|9|12,18-20|13,22-24"
#| file: "../demos/demo10.R"
```


# Shiny Modules

## DRY again

With the last demo you may have noticed that all three of the infoBoxes had nearly identical code.

As mentioned before this is something we would like to avoid / minimize wherever possible.

Previously we were able to use a `reactive()` to remove duplicate code, but that is not possible here since we need three distinct widgets + related server code.


## Modularizing Shiny code

The general solution to this kind of problem is to use functions to abstract our code.

Within Shiny there are two issues we need to address,

- Our code occurs in both the UI and the server - so we will need to write one function for each

- Shiny inputs and outputs each share a global namespace so when reusing components we need to make sure these names do not collide.


## UI module

Creation of a UI module is straightforward, 

- Create a function that takes `id` as an argument, additional arguments are optional

- The function should return a `list()` or `tagList()` of UI elements

- All `input*()` and `*Output()` functions must use `NS(id)` to mangle their `inputId` or `outputId`s respectively.

  ```{r}
  id = "widget1"
  ns = NS(id)
  ns("button")
  
  NS("widget2", id = "textout")
  ```


## Server module 

Again start with a function that takes `id` as an argument, additional arguments are optional.

- Module's server function is implemented using
  
  ```r
  moduleServer(
    id,
    function(input, output, session) {
      ...
    }
  )
  ```  

- Namespace mangling will be taken care of automatically (except for `uiOutput`/`renderUI` in which case the current namespace can be accessed with `session$ns`)


## A counting button

```{r}
#| eval: false
countButtonUI = function(id, text = "Initializing") {
  ns = NS(id)
  tagList(
    actionButton(ns("button"), label = text, class = "primary")
  )
}

countButtonServer = function(id, prefix = "Clicked: ") {
  moduleServer(
    id,
    function(input, output, session) {
      count = reactiveVal(0)
      observe({
        count(count() + 1)
      }) %>%
      bindEvent(input$button)
      
      observe({
        updateActionButton(
          inputId = "button", label = paste0(prefix, count()),
        )
      })
    }
  )
}
```

## Putting it together

```{r}
#| eval: false

shinyApp(
  ui = fluidPage(
    countButtonUI("count1"),
    countButtonUI("count2"),
    countButtonUI("count3")
  ),
  server = function(input, output, session) {
    countButtonServer("count1")
    countButtonServer("count2")
    countButtonServer("count3")
  }
)
```

## Demo 11 - Dynamic box module

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo11.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|9|12,18-20|13,22-24"
#| file: "../demos/demo11.R"
```