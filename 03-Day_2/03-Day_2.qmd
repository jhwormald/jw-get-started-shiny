---
title: "Getting Started with Shiny<br/>Day 2"
author: "Colin Rundel"
format: 
  revealjs:
    logo: images/shiny.png
    footer: "RStudioConf 2022 - Getting Started with Shiny"
    slide-number: true
    highlight-style: a11y
    theme: [default, ../custom.scss]
    revealjs-plugins:
    - ../countdown
server: shiny
execute:
  echo: true
title-slide-attributes:
    data-background-image: "images/hero-national-harbor.png"
    data-background-size: cover
    data-background-opacity: "0.5"
---

```{r setup}
#| include: false
library(shiny)
```

# Uploading data

## Demo 8 - Using `fileInput()`

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo8.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|9|12,18-20|13,22-24"
#| file: "../demos/demo8.R"
```


## `fileInput()` widget

This widget behaves a bit differently than the others we have seen - once a file is uploaded it returns a data frame with:

* `name` - the original filename (from the client's system)

* `size` - file size in bytes

* `type` - file [mime type](https://en.wikipedia.org/wiki/Media_type), usually determined by the file extension

* `datapath` - location of the *temporary* file on the server


Your app is responsible for the actual process of reading in the uploaded file.


## `fileInput()` hints

* `input$upload` will default to `NULL` when the app is loaded, using `req(input$upload)` for downstream consumers is a good idea

* Files in `datapath` are temporary and should be treated as ephemeral (additional uploads can result in the previous files being deleted)

* `type` is at best a guess - validate uploaded files and write defensive code

* The `accept` argument helps to limit file types but cannot prevent bad files


## Your turn - Exercise 5

Starting with the app version from Demo 5 (code available in `exercises/ex5.R`) replace the preloading of the weather data (`d` and `d_vars`) with reactive versions that are populated via a `fileInput()` widget. 

You should then be able to get the same app behavior as before once `data/weather.csv` is uploaded. You can also check that your app works with the `data/sedona.csv` and `data/gayload.csv` datasets as well.

*Hint* - remember that anywhere that uses either `d` or `d_vars` will now need to use `d()` and `d_vars()` instead.

<countdown time="600"/>


# Dynamic UI

## `uiOutput()`

Occasionally with a Shiny app it is necessary to have a user interface that needs to adapt dynamically based on something that cannot be known before runtime.

We will now work through an example where we allow a user to upload new data which will be used to supplement the existing weather data.

## Demo 9 - More weather (Part 1)

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo9_part1.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|33-44|58-87|87|66-77|79-85"
#| file: "../demos/demo9_part1.R"
```

## Demo 9 - More weather (Part 2)

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo9_part2.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|89-93|95-127"
#| file: "../demos/demo9_part2.R"
```